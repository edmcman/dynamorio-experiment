/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef concolic_TYPES_H
#define concolic_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




struct EventType {
  enum type {
    Breakpoint = 0,
    Timeout = 1,
    Termination = 2,
    RelevantBlock = 3,
    BeforeSystemCall = 4,
    AfterSystemCall = 5
  };
};

extern const std::map<int, const char*> _EventType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const EventType::type& val);

std::string to_string(const EventType::type& val);

typedef std::string RegisterValue;

typedef std::string RegisterID;

typedef std::map<RegisterID, RegisterValue>  RegisterContext;

typedef int64_t Addr;

typedef std::set<EventType::type>  EventTypes;

class Breakpoint;

class Exception;

typedef struct _Breakpoint__isset {
  _Breakpoint__isset() : addr(false), count(false) {}
  bool addr :1;
  bool count :1;
} _Breakpoint__isset;

class Breakpoint : public virtual ::apache::thrift::TBase {
 public:

  Breakpoint(const Breakpoint&);
  Breakpoint& operator=(const Breakpoint&);
  Breakpoint() : addr(0), count(0) {
  }

  virtual ~Breakpoint() noexcept;
  Addr addr;
  int64_t count;

  _Breakpoint__isset __isset;

  void __set_addr(const Addr val);

  void __set_count(const int64_t val);

  bool operator == (const Breakpoint & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const Breakpoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Breakpoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Breakpoint &a, Breakpoint &b);

std::ostream& operator<<(std::ostream& out, const Breakpoint& obj);

typedef struct _Exception__isset {
  _Exception__isset() : msg(false) {}
  bool msg :1;
} _Exception__isset;

class Exception : public ::apache::thrift::TException {
 public:

  Exception(const Exception&);
  Exception& operator=(const Exception&);
  Exception() : msg() {
  }

  virtual ~Exception() noexcept;
  std::string msg;

  _Exception__isset __isset;

  void __set_msg(const std::string& val);

  bool operator == (const Exception & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const Exception &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Exception & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(Exception &a, Exception &b);

std::ostream& operator<<(std::ostream& out, const Exception& obj);



#endif
