/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ConcreteEvaluator_H
#define ConcreteEvaluator_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "concolic_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ConcreteEvaluatorIf {
 public:
  virtual ~ConcreteEvaluatorIf() {}
  virtual void addBreakpoint(const Breakpoint& bp) = 0;
  virtual EventType::type executeUntilEvent(const EventTypes& stopEvents) = 0;
  virtual void getCodeBlock(CodeBlock& _return) = 0;
};

class ConcreteEvaluatorIfFactory {
 public:
  typedef ConcreteEvaluatorIf Handler;

  virtual ~ConcreteEvaluatorIfFactory() {}

  virtual ConcreteEvaluatorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ConcreteEvaluatorIf* /* handler */) = 0;
};

class ConcreteEvaluatorIfSingletonFactory : virtual public ConcreteEvaluatorIfFactory {
 public:
  ConcreteEvaluatorIfSingletonFactory(const ::std::shared_ptr<ConcreteEvaluatorIf>& iface) : iface_(iface) {}
  virtual ~ConcreteEvaluatorIfSingletonFactory() {}

  virtual ConcreteEvaluatorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ConcreteEvaluatorIf* /* handler */) {}

 protected:
  ::std::shared_ptr<ConcreteEvaluatorIf> iface_;
};

class ConcreteEvaluatorNull : virtual public ConcreteEvaluatorIf {
 public:
  virtual ~ConcreteEvaluatorNull() {}
  void addBreakpoint(const Breakpoint& /* bp */) {
    return;
  }
  EventType::type executeUntilEvent(const EventTypes& /* stopEvents */) {
    EventType::type _return = (EventType::type)0;
    return _return;
  }
  void getCodeBlock(CodeBlock& /* _return */) {
    return;
  }
};

typedef struct _ConcreteEvaluator_addBreakpoint_args__isset {
  _ConcreteEvaluator_addBreakpoint_args__isset() : bp(false) {}
  bool bp :1;
} _ConcreteEvaluator_addBreakpoint_args__isset;

class ConcreteEvaluator_addBreakpoint_args {
 public:

  ConcreteEvaluator_addBreakpoint_args(const ConcreteEvaluator_addBreakpoint_args&);
  ConcreteEvaluator_addBreakpoint_args& operator=(const ConcreteEvaluator_addBreakpoint_args&);
  ConcreteEvaluator_addBreakpoint_args() {
  }

  virtual ~ConcreteEvaluator_addBreakpoint_args() noexcept;
  Breakpoint bp;

  _ConcreteEvaluator_addBreakpoint_args__isset __isset;

  void __set_bp(const Breakpoint& val);

  bool operator == (const ConcreteEvaluator_addBreakpoint_args & rhs) const
  {
    if (!(bp == rhs.bp))
      return false;
    return true;
  }
  bool operator != (const ConcreteEvaluator_addBreakpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConcreteEvaluator_addBreakpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConcreteEvaluator_addBreakpoint_pargs {
 public:


  virtual ~ConcreteEvaluator_addBreakpoint_pargs() noexcept;
  const Breakpoint* bp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConcreteEvaluator_addBreakpoint_result__isset {
  _ConcreteEvaluator_addBreakpoint_result__isset() : exc(false) {}
  bool exc :1;
} _ConcreteEvaluator_addBreakpoint_result__isset;

class ConcreteEvaluator_addBreakpoint_result {
 public:

  ConcreteEvaluator_addBreakpoint_result(const ConcreteEvaluator_addBreakpoint_result&);
  ConcreteEvaluator_addBreakpoint_result& operator=(const ConcreteEvaluator_addBreakpoint_result&);
  ConcreteEvaluator_addBreakpoint_result() {
  }

  virtual ~ConcreteEvaluator_addBreakpoint_result() noexcept;
  Exception exc;

  _ConcreteEvaluator_addBreakpoint_result__isset __isset;

  void __set_exc(const Exception& val);

  bool operator == (const ConcreteEvaluator_addBreakpoint_result & rhs) const
  {
    if (!(exc == rhs.exc))
      return false;
    return true;
  }
  bool operator != (const ConcreteEvaluator_addBreakpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConcreteEvaluator_addBreakpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConcreteEvaluator_addBreakpoint_presult__isset {
  _ConcreteEvaluator_addBreakpoint_presult__isset() : exc(false) {}
  bool exc :1;
} _ConcreteEvaluator_addBreakpoint_presult__isset;

class ConcreteEvaluator_addBreakpoint_presult {
 public:


  virtual ~ConcreteEvaluator_addBreakpoint_presult() noexcept;
  Exception exc;

  _ConcreteEvaluator_addBreakpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConcreteEvaluator_executeUntilEvent_args__isset {
  _ConcreteEvaluator_executeUntilEvent_args__isset() : stopEvents(false) {}
  bool stopEvents :1;
} _ConcreteEvaluator_executeUntilEvent_args__isset;

class ConcreteEvaluator_executeUntilEvent_args {
 public:

  ConcreteEvaluator_executeUntilEvent_args(const ConcreteEvaluator_executeUntilEvent_args&);
  ConcreteEvaluator_executeUntilEvent_args& operator=(const ConcreteEvaluator_executeUntilEvent_args&);
  ConcreteEvaluator_executeUntilEvent_args() {
  }

  virtual ~ConcreteEvaluator_executeUntilEvent_args() noexcept;
  EventTypes stopEvents;

  _ConcreteEvaluator_executeUntilEvent_args__isset __isset;

  void __set_stopEvents(const EventTypes& val);

  bool operator == (const ConcreteEvaluator_executeUntilEvent_args & rhs) const
  {
    if (!(stopEvents == rhs.stopEvents))
      return false;
    return true;
  }
  bool operator != (const ConcreteEvaluator_executeUntilEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConcreteEvaluator_executeUntilEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConcreteEvaluator_executeUntilEvent_pargs {
 public:


  virtual ~ConcreteEvaluator_executeUntilEvent_pargs() noexcept;
  const EventTypes* stopEvents;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConcreteEvaluator_executeUntilEvent_result__isset {
  _ConcreteEvaluator_executeUntilEvent_result__isset() : success(false) {}
  bool success :1;
} _ConcreteEvaluator_executeUntilEvent_result__isset;

class ConcreteEvaluator_executeUntilEvent_result {
 public:

  ConcreteEvaluator_executeUntilEvent_result(const ConcreteEvaluator_executeUntilEvent_result&);
  ConcreteEvaluator_executeUntilEvent_result& operator=(const ConcreteEvaluator_executeUntilEvent_result&);
  ConcreteEvaluator_executeUntilEvent_result() : success((EventType::type)0) {
  }

  virtual ~ConcreteEvaluator_executeUntilEvent_result() noexcept;
  EventType::type success;

  _ConcreteEvaluator_executeUntilEvent_result__isset __isset;

  void __set_success(const EventType::type val);

  bool operator == (const ConcreteEvaluator_executeUntilEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConcreteEvaluator_executeUntilEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConcreteEvaluator_executeUntilEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConcreteEvaluator_executeUntilEvent_presult__isset {
  _ConcreteEvaluator_executeUntilEvent_presult__isset() : success(false) {}
  bool success :1;
} _ConcreteEvaluator_executeUntilEvent_presult__isset;

class ConcreteEvaluator_executeUntilEvent_presult {
 public:


  virtual ~ConcreteEvaluator_executeUntilEvent_presult() noexcept;
  EventType::type* success;

  _ConcreteEvaluator_executeUntilEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ConcreteEvaluator_getCodeBlock_args {
 public:

  ConcreteEvaluator_getCodeBlock_args(const ConcreteEvaluator_getCodeBlock_args&);
  ConcreteEvaluator_getCodeBlock_args& operator=(const ConcreteEvaluator_getCodeBlock_args&);
  ConcreteEvaluator_getCodeBlock_args() {
  }

  virtual ~ConcreteEvaluator_getCodeBlock_args() noexcept;

  bool operator == (const ConcreteEvaluator_getCodeBlock_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ConcreteEvaluator_getCodeBlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConcreteEvaluator_getCodeBlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConcreteEvaluator_getCodeBlock_pargs {
 public:


  virtual ~ConcreteEvaluator_getCodeBlock_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConcreteEvaluator_getCodeBlock_result__isset {
  _ConcreteEvaluator_getCodeBlock_result__isset() : success(false), exc(false) {}
  bool success :1;
  bool exc :1;
} _ConcreteEvaluator_getCodeBlock_result__isset;

class ConcreteEvaluator_getCodeBlock_result {
 public:

  ConcreteEvaluator_getCodeBlock_result(const ConcreteEvaluator_getCodeBlock_result&);
  ConcreteEvaluator_getCodeBlock_result& operator=(const ConcreteEvaluator_getCodeBlock_result&);
  ConcreteEvaluator_getCodeBlock_result() {
  }

  virtual ~ConcreteEvaluator_getCodeBlock_result() noexcept;
  CodeBlock success;
  Exception exc;

  _ConcreteEvaluator_getCodeBlock_result__isset __isset;

  void __set_success(const CodeBlock& val);

  void __set_exc(const Exception& val);

  bool operator == (const ConcreteEvaluator_getCodeBlock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(exc == rhs.exc))
      return false;
    return true;
  }
  bool operator != (const ConcreteEvaluator_getCodeBlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConcreteEvaluator_getCodeBlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConcreteEvaluator_getCodeBlock_presult__isset {
  _ConcreteEvaluator_getCodeBlock_presult__isset() : success(false), exc(false) {}
  bool success :1;
  bool exc :1;
} _ConcreteEvaluator_getCodeBlock_presult__isset;

class ConcreteEvaluator_getCodeBlock_presult {
 public:


  virtual ~ConcreteEvaluator_getCodeBlock_presult() noexcept;
  CodeBlock* success;
  Exception exc;

  _ConcreteEvaluator_getCodeBlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ConcreteEvaluatorClient : virtual public ConcreteEvaluatorIf {
 public:
  ConcreteEvaluatorClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ConcreteEvaluatorClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void addBreakpoint(const Breakpoint& bp);
  void send_addBreakpoint(const Breakpoint& bp);
  void recv_addBreakpoint();
  EventType::type executeUntilEvent(const EventTypes& stopEvents);
  void send_executeUntilEvent(const EventTypes& stopEvents);
  EventType::type recv_executeUntilEvent();
  void getCodeBlock(CodeBlock& _return);
  void send_getCodeBlock();
  void recv_getCodeBlock(CodeBlock& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ConcreteEvaluatorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ConcreteEvaluatorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ConcreteEvaluatorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_addBreakpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executeUntilEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCodeBlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ConcreteEvaluatorProcessor(::std::shared_ptr<ConcreteEvaluatorIf> iface) :
    iface_(iface) {
    processMap_["addBreakpoint"] = &ConcreteEvaluatorProcessor::process_addBreakpoint;
    processMap_["executeUntilEvent"] = &ConcreteEvaluatorProcessor::process_executeUntilEvent;
    processMap_["getCodeBlock"] = &ConcreteEvaluatorProcessor::process_getCodeBlock;
  }

  virtual ~ConcreteEvaluatorProcessor() {}
};

class ConcreteEvaluatorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ConcreteEvaluatorProcessorFactory(const ::std::shared_ptr< ConcreteEvaluatorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< ConcreteEvaluatorIfFactory > handlerFactory_;
};

class ConcreteEvaluatorMultiface : virtual public ConcreteEvaluatorIf {
 public:
  ConcreteEvaluatorMultiface(std::vector<std::shared_ptr<ConcreteEvaluatorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ConcreteEvaluatorMultiface() {}
 protected:
  std::vector<std::shared_ptr<ConcreteEvaluatorIf> > ifaces_;
  ConcreteEvaluatorMultiface() {}
  void add(::std::shared_ptr<ConcreteEvaluatorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void addBreakpoint(const Breakpoint& bp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addBreakpoint(bp);
    }
    ifaces_[i]->addBreakpoint(bp);
  }

  EventType::type executeUntilEvent(const EventTypes& stopEvents) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executeUntilEvent(stopEvents);
    }
    return ifaces_[i]->executeUntilEvent(stopEvents);
  }

  void getCodeBlock(CodeBlock& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCodeBlock(_return);
    }
    ifaces_[i]->getCodeBlock(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ConcreteEvaluatorConcurrentClient : virtual public ConcreteEvaluatorIf {
 public:
  ConcreteEvaluatorConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ConcreteEvaluatorConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void addBreakpoint(const Breakpoint& bp);
  int32_t send_addBreakpoint(const Breakpoint& bp);
  void recv_addBreakpoint(const int32_t seqid);
  EventType::type executeUntilEvent(const EventTypes& stopEvents);
  int32_t send_executeUntilEvent(const EventTypes& stopEvents);
  EventType::type recv_executeUntilEvent(const int32_t seqid);
  void getCodeBlock(CodeBlock& _return);
  int32_t send_getCodeBlock();
  void recv_getCodeBlock(CodeBlock& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
